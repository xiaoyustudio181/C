数据类型
1，基本类型：它们是算术类型，包括两种类型：整数类型和浮点类型。
2，枚举类型：它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。
3，void 类型：类型说明符 void 表明没有可用的值。
4，派生类型：它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。
=========================================
整数类型
下表列出了关于标准整数类型的存储大小和值范围的细节：
类型	存储大小	值范围
char	1 字节	-128 到 127 或 0 到 255
unsigned char	1 字节	0 到 255
signed char	1 字节	-128 到 127
int	2 或 4 字节	-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647
unsigned int	2 或 4 字节	0 到 65,535 或 0 到 4,294,967,295
short	2 字节	-32,768 到 32,767
unsigned short	2 字节	0 到 65,535
long	4 字节	-2,147,483,648 到 2,147,483,647
unsigned long	4 字节	0 到 4,294,967,295
=========================================
浮点类型
下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：
类型	存储大小	值范围	精度
float	4 字节	1.2E-38 到 3.4E+38	6 位小数
double	8 字节	2.3E-308 到 1.7E+308	15 位小数
long double	16 字节	3.4E-4932 到 1.1E+4932	19 位小数
=========================================
void 类型
void 类型指定没有可用的值。它通常用于以下三种情况下：
序号	类型与描述
1	函数返回为空
C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 void exit (int status);
2	函数参数为空
C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 int rand(void);
3	指针指向 void
类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 void *malloc( size_t size ); 返回指向 void 的指针，可以转换为任何数据类型。
=========================================
基本类型书写
整数
 a，默认为10进制 ，10 ，20。
 b，以0开头为8进制，045，021。
 c.，以0b开头为2进制，0b11101101。
 d，以0x开头为16进制，0x21458adf。
小数
单精度常量：2.3f 。
双精度常量：2.3，默认为双精度。
字符型常量
用英文单引号括起来，只保存一个字符'a'、'b' 、'*' ，还有转义字符 '\n' 、'\t'。
字符串常量
用英文的双引号引起来 可以保存多个字符："abc"。
=========================================
1、数据类型转换：C 语言中如果一个表达式中含有不同类型的常量和变量，在计算时，会将它们自动转换为同一种类型；在 C 语言中也可以对数据类型进行强制转换；
2、自动转换规则：
 a）浮点数赋给整型，该浮点数小数被舍去；
 b）整数赋给浮点型，数值不变，但是被存储到相应的浮点型变量中；
3、强制类型转换形式: (类型说明符)(表达式)
实例程序：
#include<stdio.h>
int main()
{
    float f,x=3.6,y=5.2;
    int i=4,a,b;
    a=x+y;
    b=(int)(x+y);
    f=10/i;
    printf("a=%d,b=%d,f=%f,x=%f\n",a,b,f,x);
}
例中先计算 x+y 值为 8.8，然后赋值给 a，因为a为整型，所以自取整数部分8，a=8;
接下来 b 把 x+y 强制转换为整型;
最后 10/i 是两个整数相除，结果仍为整数 2，把 2 赋给浮点数 f;
x 为浮点型直接输出。